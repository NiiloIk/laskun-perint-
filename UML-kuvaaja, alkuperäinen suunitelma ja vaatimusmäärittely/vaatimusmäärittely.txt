1. Johdanto
1.1 Tarkoitus ja kattavuus

Tarkoitus luoda laskutussovellus, joka pitää muistissa laskujen saajan ja summan.
Sovellus jota voi käyttää laskutietojen tallentamiseen. Sovelluksessa voi tallentaa laskut ja sovellus laskee eräpäivän ja laskee eräpäivän yli menneesstä ajasta automaattisesti lisät. Maksumuistutukset ja laskujen kuittaukset tehdään manuaalisesti.

1.2 Tuote ja ympäristö

Wpf sovellus toimii windows alustalla

1.3 Määritelmät, termit ja lyhenteet

Wpf eli Windows Presentation Foundation on UI framework jolla voi luoda työpöytä client sovelluksia.

1.4 Viitteet

https://book.sovelluskontti.com/toimeksiannot-2020-01/laskun-perintae

1.5 Yleiskatsaus dokumenttiin

kansiosta löytyy työajat, hahmotelmat ja suunnitelmat ja sovellus

2. Yleiskuvaus
2.1 Ympäristö

Laskutussovellus, joka toimii Wpf ympäristössä

2.2 Toiminta

Käyttäjä voi manuaalisesti luoda uusia laskuja ja päästä vanhoihin laskutietoihin käsiksi
Pääikkunassa näkyy vaihtoehto luoda uusi lasku tai päästä vanhoihin laskuihin. Valintaa klikatessa aukeeaa uusi ikkuna, jossa mahdollista luoda uusi lasku tai muokata vanhoja laskuja. Uusi lasku ikkunassa voi tallentaa laskulle nimen, osoitteen, summan ja tallennuspäivän. Vanhat laskut ikkunassa näkyy maksetut ja maksamattomat laskut menut. Menu itemeinä toimii laskunsaajan nimi; menuitemiä klikatessa kyseisen laskun tiedot näkyy. Ikkunoiden välillä navigointi toimii ikkunan vasemmasta yläkulmasta löytyvän dockpanel menun kautta 

2.3 Käyttäjät

Käyttäjänä toimii henkilö, joka vastaa laskuista

2.4 Yleiset rajoitteet

Sovelluksessa yksinkertainen UI

2.5 Oletukset ja riippuvuudet

Toimii windows käyttöjärjestelmässä, muilla käyttöjärjestelmillä toimivuutta ei ole testattu.

3. Tiedot ja tietokanta
3.1 Tietosisältö

Laskut tallennetan JSON tiedostoon ja luetaan sieltä sovelluksen sisään.

3.2 Kapasiteettivaatimukset

windows tietokone, joka voi pyörittää visual studio 2022. Eli vähintään 
Windows 365: Minimum 2 vCPU and 8 GB RAM. 4 vCPU and 16 GB of RAM recommended. Hard disk space: Minimum of 850 MB up to 210 GB of available space, depending on features installed; typical installations require 20-50 GB of free space.


4. Toiminnot
4.1 Uusi lasku

Luodessa uuden laskun, ohjelmisto tallentaa automaattisesti laskutiedot talteen. Ohjelmisto asettaa automaattisesti laskulle eräpäivän.

4.2 Vanhat laskut

Ladatessa vanhat laskut sivun, ohjelmisto hakee tallennetut laskutiedot omasta kansiostaan ja laittavat ne näytölle näkyviin. Maksetut laskut ja maksamattomat laskut asettuvat omiin listoihinsa. Jos maksamattoman laskun eräpäivä on jo mennyt, niin ohjelma antaa käyttäjälle makdollisuuden lähettää maksumuistutuksen, josta tulee lisämaksu.
Maksamattoman laskun voi asettaa ohjelmasta maksetuksi, jolloin maksamaton lasku siirtyy maksettujen laskujen listalle.


5. Ulkoiset liittymät

6. Muut ominaisuudet

6.1 Saavutettavuus (availability), toipuminen, turvallisuus, suojaukset

Ohjelmistolla voi luoda uuden laskun pelkällä näppäimistöllä, mutta vanhoja laskuja ei pysty tarkastamaan. 

Järjestelmään tallennetut laskut eivät ole olemassa missään muualla, kuin sillä tietokoneella millä ohjelmaa käytetään, joten se on osittain turvallinen. Ohjelmisto on juuri niin haavoittuvainen kuin käyttäjän tietokone on.

6.2 Ylläpidettävyys

Koodia voi olla hieman sekavaa lukea, mutta sitä pystyisi kehittää ja parantaa ilman suurempia ongelmia.

6.3 Siirrettävyys ja yhteensopivuus

Ohjelmisto ei tarkista yhteensopivuutta missään vaiheessa.

7. Suunnittelurajoitteet

Ohjelmisto ei lähetä laskuja oikeasti mihinkään, joten laskutiedot pitäisi kopioida ja lähettää eteenpäin. 

8. Hylätyt ratkaisuvaihtoehdot

9. Jatkokehitysajatuksia

Ohjelmisto voisi lähettää varmistuksen jälkeen laskut oikeaan osoitteeseen. Sen jälkeen maksumuistutukset voitaisiin lähettää automaattisesti, jos laskut ovat vielä maksamattomia.
Ohjelmisto voisi myös saada vahvistuksen laskujen maksusta ja merkata laskut maksetuksi ilman, että niitä tarvitsisi manuaalisesti asettaa maksetuksi.
Koodia voisi parantaa selkeämmäksi ja kevyemmäksi.
